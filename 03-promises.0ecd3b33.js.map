{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,MAAOF,SAASC,cAAc,WAuChC,SAASE,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,aAAY,WACNN,EACFI,EAAQ,uBAAwCG,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDM,EAAK,sBAAuCE,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAErDA,E,IA9CPS,QAAQC,IAAIjB,EAAKC,OAAOiB,SAASC,OAAOC,OAGxCpB,EAAKC,OAAOoB,iBAAiB,UAI7B,SAAuBC,GACrBA,EAAEC,iBAQF,IANA,IAEmBC,EAAfF,EAAEG,cADJP,SAAYQ,EAAKF,EAALjB,MAAaY,GAAFK,EAAJG,KAAYH,EAANL,QAGvBS,EAAW,EAENC,EAAI,EAAGA,GAAKV,EAAOC,MAAOS,GAAK,EACtCb,QAAQc,IAAID,GACZD,EAAWC,EACXb,QAAQc,IAAIF,GACZZ,QAAQc,KAAKJ,EAAMN,OAEnBf,EAAcuB,EAAUF,GACrBK,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBS,QAAQc,IACNhC,EAAAmC,OAAOC,QAAQ,uBAAwCnB,OAAfT,EAAS,QAAYS,OAANR,EAAM,O,IAGhE4B,OAAM,SAAAH,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBS,QAAQc,IACNhC,EAAAmC,OAAOG,QAAQ,sBAAuCrB,OAAfT,EAAS,QAAYS,OAANR,EAAM,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  btnEl: document.querySelector('button'),\n};\n\nconsole.dir(refs.formEl.elements.amount.value);\n// const amount = refs.formEl.elements.amount.value;\n\nrefs.formEl.addEventListener('submit', onButtonClick);\n\n// refs.btnEl.addEventListener('submit', onButtonClick);\n\nfunction onButtonClick(e) {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  let position = 0;\n\n  for (let i = 0; i <= amount.value; i += 1) {\n    console.log(i);\n    position = i;\n    console.log(position);\n    console.log(+delay.value);\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        );\n      })\n      .catch(({ position, delay }) => {\n        console.log(\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n  return promise;\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n//   });\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","btnEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setInterval","concat","console","dir","elements","amount","value","addEventListener","e","preventDefault","_elements","currentTarget","delay1","step","position1","i","log","then","param","Notify","success","catch","failure"],"version":3,"file":"03-promises.0ecd3b33.js.map"}